===== Server One: Webservice for MoMult Sound Project =====

This document explains the usage of Server One and related tools.

==== Requirements ====

To run Server One, you will need the following:

  * Apache webserver with root access
  * Support for PHP 5.x
  * SOAP extension must be enabled
  * PDO extension must be enabled
  * Database backend (e.g. MySQL or PostgreSQL)
  * A (non-public) folder for media file upload

==== File description ====

Server One is based on a SOAP webservice written for PHP 5.x. It includes the following files:

  * config.php: Used for service configuration.

  * s1.wsdl: Webservice description. You find information about public interfaces and method arguments here.

  * Database.php: Used to access database backend via PHP's PDO extension.

  * MediaService.php: Webservice that handles SOAP requests.

  * MediaServer.php: Core server application for request handling (i.e. base64 decoding, file management, database access).

==== Webservice interfaces ====

Currently the MediaService provides the following webservice methods:

  * uploadSample(latitude, longitude, description, payloadType, payload)

      * Description:
          Upload a sound sample to the server

      * Arguments:
        - latitude: xsd:decimal, range +/- 90.0
        - longitude: xsd:decimal, range +/- 180.0°
        - description: xsd:string
        - payloadType: xsd:string, either one of "mp3" or "ogg"
        - payload: xsd:string, base64 encoded binary file (sound sample)

      * Return values:
        - Statuscode: xsd:string, e.g. "OK" or "Error"
        - Message: xsd:string, human-readable message

---

  * reportNoiseLevel(latitude, longitude, noiseLevel)

      * Description:
          Report noise level for given location

      * Arguments:
        - latitude: xsd:decimal, range +/- 90.0
        - longitude: xsd:decimal, range +/- 180.0°
        - noiseLevel: xsd:int, integer values, unit is dB

      * Return values:
        - Statuscode: xsd:string, e.g. "OK" or "Error"
        - Message: xsd:string, human-readable message

---

  * getSamples(latitude, longitude, range)

      * Description:
          Get a list of sound samples for the nearby area

      * Arguments:
        - latitude: xsd:decimal, range +/- 90.0
        - longitude: xsd:decimal, range +/- 180.0°
        - range: xsd:decimal, unit is km

      * Return values:
        - Statuscode: xsd:string, e.g. "OK" or "Error"
        - Message: xsd:string, human-readable message
        - SampleData: xsd:struct, a list with sample data (if any)
        - ResultCount: xsd:int, number of results returned

---

  * getNoiseLevels(latitude, longitude, range)

      * Description:
          Get a list of noise levels recorded in the nearby area

      * Arguments:
        - latitude: xsd:decimal, range +/- 90.0
        - longitude: xsd:decimal, range +/- 180.0°
        - range: xsd:decimal, unit is km

      * Return values:
        - Statuscode: xsd:string, e.g. "OK" or "Error"
        - Message: xsd:string, human-readable message
        - NoiseLevels: xsd:struct, a list of noise levels (if any)
        - ResultCount: xsd:int, number of results returned

==== Geo coordinates ====

Geo locations are processed as decimal degrees [1], that is values from +/- 90.0° for latitude and +/- 180.0° for longitude.

"53.834208, 10.700136" describes the "latitude (north, south), longitude (west, east)" of the Audimax, UzL [2].

==== Neighbourhood discovery ====

To find nearby points of interest (POI), e.g. sound samples recorded in the neighbourhood, you can provide your current location and a range. Geo location must be given as decimal degrees, whereas the unit for range is km.

A value of 0.01 degree is equal to 1.11 km. So 1 km is on about 0.009 degree.

==== References ====

[1] http://en.wikipedia.org/wiki/Decimal_degrees
[2] http://maps.google.com/?q=53.834208, 10.700136&t=h&z=20
